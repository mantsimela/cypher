#!/usr/bin/env node

const { db, client } = require('../src/db');
const fs = require('fs');
const path = require('path');

async function seedVulnerabilityData() {
  try {
    console.log('🔍 Starting simple vulnerability data seeding...');
    
    // Read the SQL file
    const sqlFilePath = path.join(__dirname, 'seed-vulnerability-data-simple.sql');
    const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');
    
    console.log('📄 Executing simple vulnerability seeding SQL script...');
    
    // Execute the entire SQL script
    await client.unsafe(sqlContent);
    
    console.log('✅ Simple vulnerability data seeding completed successfully!');
    
    // Verify the data was inserted
    console.log('\n📊 Verifying data insertion...');
    
    try {
      const vulnerabilityCount = await client`SELECT COUNT(*) as count FROM vulnerabilities`;
      const cveCount = await client`SELECT COUNT(*) as count FROM cves`;
      const patchCount = await client`SELECT COUNT(*) as count FROM patches`;
      
      console.log(`📊 Data verification results:`);
      console.log(`   🛡️  Total Vulnerabilities: ${vulnerabilityCount[0].count}`);
      console.log(`   🔗 Total CVEs: ${cveCount[0].count}`);
      console.log(`   🔧 Total Patches: ${patchCount[0].count}`);
      
      // Show severity breakdown
      const severityBreakdown = await client`
        SELECT 
          severity_name,
          COUNT(*) as count,
          ROUND(AVG(cvss3_base_score), 2) as avg_cvss
        FROM vulnerabilities 
        GROUP BY severity_name, severity
        ORDER BY severity DESC
      `;
      
      console.log(`\n📈 Vulnerability severity breakdown:`);
      severityBreakdown.forEach(row => {
        console.log(`   ${row.severity_name}: ${row.count} vulnerabilities (avg CVSS: ${row.avg_cvss})`);
      });
      
      console.log('\n🎉 Simple vulnerability data seeding verification completed!');
      console.log('\n💡 Next steps:');
      console.log('   1. Run the full seeding script for 1000+ vulnerabilities');
      console.log('   2. Create asset-vulnerability relationships');
      console.log('   3. Link vulnerabilities to CVEs and patches');
      
    } catch (verifyError) {
      console.error('❌ Error verifying data:', verifyError.message);
    }
    
  } catch (error) {
    console.error('❌ Simple vulnerability data seeding failed:', error);
    console.error('Error details:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

// Handle unhandled promise rejections
process.on('unhandledRejection', (error) => {
  console.error('❌ Unhandled promise rejection:', error);
  process.exit(1);
});

// Run the seeder
console.log('🚀 Simple Vulnerability Data Seeding Script');
console.log('============================================');
seedVulnerabilityData();
