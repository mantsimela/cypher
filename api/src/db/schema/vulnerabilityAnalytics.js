const { pgTable, serial, varchar, text, timestamp, decimal, boolean, integer, jsonb, uuid } = require('drizzle-orm/pg-core');
const { vulnerabilities } = require('./vulnerabilities');
const { assets } = require('./assets');
const { users } = require('./users');
const { poams } = require('./poams');

// Vulnerability Cost Analysis - matches your exact database schema
const vulnerabilityCostAnalysis = pgTable('vulnerability_cost_analysis', {
  id: serial('id').primaryKey(),
  vulnerabilityId: integer('vulnerability_id').notNull(),
  costModelId: integer('cost_model_id'),
  directCosts: decimal('direct_costs', { precision: 15, scale: 2 }).notNull(),
  indirectCosts: decimal('indirect_costs', { precision: 15, scale: 2 }).notNull(),
  remediationCosts: decimal('remediation_costs', { precision: 15, scale: 2 }).notNull(),
  timeCosts: decimal('time_costs', { precision: 15, scale: 2 }),
  totalCost: decimal('total_cost', { precision: 15, scale: 2 }).notNull(),
  costBenefitRatio: decimal('cost_benefit_ratio', { precision: 15, scale: 2 }),
  roiPercentage: decimal('roi_percentage', { precision: 15, scale: 2 }),
  dataFactors: jsonb('data_factors').default('{}'),
  aiConfidence: decimal('ai_confidence', { precision: 15, scale: 2 }),
  analysisDate: timestamp('analysis_date', { withTimezone: true }).defaultNow().notNull(),
  calculatedBy: text('calculated_by'),
});

// Vulnerability Cost Factors - matches your exact database schema
const vulnerabilityCostFactors = pgTable('vulnerability_cost_factors', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  description: text('description').notNull(),
  weight: decimal('weight', { precision: 15, scale: 2 }).notNull(),
  category: text('category').notNull(),
  minValue: decimal('min_value', { precision: 15, scale: 2 }).notNull(),
  maxValue: decimal('max_value', { precision: 15, scale: 2 }).notNull(),
  defaultValue: decimal('default_value', { precision: 15, scale: 2 }).notNull(),
  isActive: boolean('is_active').default(true).notNull(),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow().notNull(),
});

// Vulnerability Cost History - matches your exact database schema
const vulnerabilityCostHistory = pgTable('vulnerability_cost_history', {
  id: serial('id').primaryKey(),
  vulnerabilityId: integer('vulnerability_id').notNull(),
  previousTotalCost: decimal('previous_total_cost', { precision: 15, scale: 2 }),
  newTotalCost: decimal('new_total_cost', { precision: 15, scale: 2 }),
  costModelId: integer('cost_model_id'),
  changeReason: text('change_reason'),
  changedBy: integer('changed_by'),
  changedAt: timestamp('changed_at', { withTimezone: true }).defaultNow().notNull(),
});

// Vulnerability Cost Models - matches your exact database schema
const vulnerabilityCostModels = pgTable('vulnerability_cost_models', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  description: text('description').notNull(),
  formula: text('formula').notNull(),
  parameters: jsonb('parameters').default('{}'),
  isDefault: boolean('is_default').default(false).notNull(),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow().notNull(),
});

// Note: vulnerability_databases table is no longer used - using vulnerabilities table instead

// Vulnerability Patches - matches your exact database schema
const vulnerabilityPatches = pgTable('vulnerability_patches', {
  id: serial('id').primaryKey(),
  vulnerabilityId: integer('vulnerability_id').notNull(),
  patchId: integer('patch_id').notNull(),
  effectiveness: varchar('effectiveness', { length: 20 }).default('complete').notNull(),
  notes: text('notes'),
});

// Vulnerability POAMs - matches your exact database schema
const vulnerabilityPoams = pgTable('vulnerability_poams', {
  id: serial('id').primaryKey(),
  vulnerabilityId: integer('vulnerability_id'),
  poamId: varchar('poam_id', { length: 50 }),
  relationshipType: varchar('relationship_type', { length: 50 }).default('addresses'),
  createdAt: timestamp('created_at').defaultNow(),
});

module.exports = {
  vulnerabilityCostAnalysis,
  vulnerabilityCostFactors,
  vulnerabilityCostHistory,
  vulnerabilityCostModels,
  vulnerabilityPatches,
  vulnerabilityPoams,
};
