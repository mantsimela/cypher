import React, { useState, useEffect, useMemo } from "react";
import Head from "../../layout/head/Head";
import Content from "../../layout/content/Content";
import { Badge, UncontrolledDropdown, DropdownMenu, DropdownToggle, DropdownItem, Button } from "reactstrap";
import {
  Block,
  BlockHead,
  BlockHeadContent,
  BlockTitle,
  BlockDes,
  Icon,
  DataTable,
  DataTableBody,
  DataTableHead,
  DataTableRow,
  DataTableItem,
  PaginationComponent,
  RSelect,
} from "../../components/Component";
import { vulnerabilitiesApi } from "../../utils/vulnerabilitiesApi";
import { globalMetricsApi } from "../../utils/globalMetricsApi";
import { toast } from "react-toastify";
import VulnerabilityDetailsPanel from "./components/VulnerabilityDetailsPanel";
import CVEDetailsPanel from "./components/CVEDetailsPanel";

const VulnerabilityData = () => {
  // State management
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedRows, setSelectedRows] = useState([]);
  const [sortField, setSortField] = useState("");
  const [sortDirection, setSortDirection] = useState("asc");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemPerPage, setItemPerPage] = useState(50);
  const [onSearch, setOnSearch] = useState(false);
  const [summaryData, setSummaryData] = useState({
    total: 0,
    critical: 0,
    high: 0,
    medium: 0,
    low: 0,
    resolutionRate: 0,
  });
  const [detailsPanelOpen, setDetailsPanelOpen] = useState(false);
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [cvePanelOpen, setCvePanelOpen] = useState(false);
  const [selectedCveId, setSelectedCveId] = useState(null);

  // Fetch vulnerability data and metrics
  const fetchVulnerabilityData = async () => {
    try {
      setLoading(true);

      // Fetch both vulnerability data and real-time metrics in parallel
      const [vulnerabilityResponse, metricsResponse] = await Promise.all([
        vulnerabilitiesApi.getVulnerabilities({
          limit: 1000,
          offset: 0
        }),
        globalMetricsApi.getVulnerabilityMetrics(false) // Use cached metrics unless forced
      ]);

      if (vulnerabilityResponse.success) {
        setData(vulnerabilityResponse.data);
      }

      // Use real-time metrics from global metrics service
      if (metricsResponse.success) {
        setSummaryData({
          total: metricsResponse.data.total,
          critical: metricsResponse.data.critical,
          high: metricsResponse.data.high,
          medium: metricsResponse.data.medium,
          low: metricsResponse.data.low,
          resolutionRate: metricsResponse.data.resolutionRate
        });
      } else {
        // Fallback to calculating from fetched data if metrics service fails
        const total = vulnerabilityResponse.data?.length || 0;
        const critical = vulnerabilityResponse.data?.filter(v => v.severity_name === 'Critical').length || 0;
        const high = vulnerabilityResponse.data?.filter(v => v.severity_name === 'High').length || 0;
        const medium = vulnerabilityResponse.data?.filter(v => v.severity_name === 'Medium').length || 0;
        const low = vulnerabilityResponse.data?.filter(v => v.severity_name === 'Low').length || 0;

        setSummaryData({ total, critical, high, medium, low, resolutionRate: 0 });
      }
    } catch (error) {
      console.error("Error fetching vulnerability data:", error);
      toast.error("Error fetching vulnerability data: " + error.message);
      setData([]);
      setSummaryData({ total: 0, critical: 0, high: 0, medium: 0, low: 0, resolutionRate: 0 });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchVulnerabilityData();
  }, []);

  // Force refresh metrics
  const refreshMetrics = async () => {
    try {
      setLoading(true);
      const metricsResponse = await globalMetricsApi.getVulnerabilityMetrics(true); // Force refresh

      if (metricsResponse.success) {
        setSummaryData({
          total: metricsResponse.data.total,
          critical: metricsResponse.data.critical,
          high: metricsResponse.data.high,
          medium: metricsResponse.data.medium,
          low: metricsResponse.data.low,
          resolutionRate: metricsResponse.data.resolutionRate
        });
        toast.success("Metrics refreshed successfully!");
      }
    } catch (error) {
      console.error("Error refreshing metrics:", error);
      toast.error("Error refreshing metrics: " + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Handle row selection
  const handleRowSelect = (item, checked) => {
    if (checked) {
      setSelectedRows([...selectedRows, item]);
    } else {
      setSelectedRows(selectedRows.filter(row => row.id !== item.id));
    }
  };

  // Handle select all
  const handleSelectAll = (checked) => {
    if (checked) {
      setSelectedRows([...currentItems]);
    } else {
      setSelectedRows([]);
    }
  };

  // Sorting functionality
  const handleSort = (field) => {
    if (typeof field === 'function') {
      const fieldName = field.toString().match(/row\.(\w+)/)?.[1] || '';
      if (sortField === fieldName) {
        setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
      } else {
        setSortField(fieldName);
        setSortDirection('asc');
      }
    }
  };

  // Handle opening vulnerability details panel
  const handleViewDetails = (vulnerability) => {
    setSelectedVulnerability(vulnerability);
    setDetailsPanelOpen(true);
  };

  // Handle closing vulnerability details panel
  const handleClosDetailsPanel = () => {
    setDetailsPanelOpen(false);
    setSelectedVulnerability(null);
  };

  // Handle opening CVE details panel
  const handleViewCVE = (cveId) => {
    setSelectedCveId(cveId);
    setCvePanelOpen(true);
  };

  // Handle closing CVE details panel
  const handleCloseCVEPanel = () => {
    setCvePanelOpen(false);
    setSelectedCveId(null);
  };

  // Export functionality
  const handleExport = (format) => {
    const exportData = data.map(row => ({
      'Plugin ID': row.plugin_id,
      'Plugin Name': row.plugin_name,
      'Family': row.plugin_family,
      'Severity': row.severity_name,
      'CVSS Score': row.cvss3_base_score,
      'CVEs': row.cves && row.cves.length > 0 ? row.cves.map(cve => cve.cve_id).join(', ') : 'None',
      'Status': row.state,
      'First Found': row.first_found ? new Date(row.first_found).toLocaleDateString() : 'N/A',
      'Last Found': row.last_found ? new Date(row.last_found).toLocaleDateString() : 'N/A',
      'Asset UUID': row.asset_uuid,
      'Description': row.description,
      'Solution': row.solution,
    }));

    const dateStr = new Date().toISOString().split('T')[0];
    const fileName = `vulnerability_data_${dateStr}`;

    switch (format) {
      case 'csv':
        const csvContent = [
          Object.keys(exportData[0]).join(','),
          ...exportData.map(row => Object.values(row).map(val => `"${val}"`).join(','))
        ].join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${fileName}.csv`;
        a.click();
        window.URL.revokeObjectURL(url);
        break;

      case 'excel':
        import('export-from-json').then(module => {
          const exportFromJSON = module.default;
          exportFromJSON({
            data: exportData,
            fileName,
            exportType: 'xls'
          });
        }).catch(error => {
          console.error('Error exporting to Excel:', error);
          toast.error('Error exporting to Excel');
        });
        break;

      case 'pdf':
        const printWindow = window.open('', '_blank');

        if (!printWindow) {
          alert('Please allow pop-ups to export as PDF');
          return;
        }

        const tableHTML = `
          <!DOCTYPE html>
          <html>
          <head>
            <title>${fileName}</title>
            <style>
              body { font-family: Arial, sans-serif; }
              table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
              th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
              th { background-color: #f2f2f2; font-weight: bold; }
              .header { margin-bottom: 20px; }
              .header h1 { margin-bottom: 5px; }
              .header p { color: #666; margin-top: 0; }
              @media print {
                button { display: none; }
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>Vulnerability Data Export</h1>
              <p>Generated on ${new Date().toLocaleString()}</p>
            </div>
            <button onclick="window.print();window.close();" style="padding: 10px; margin-bottom: 20px; cursor: pointer;">
              Print as PDF
            </button>
            <table>
              <thead>
                <tr>
                  ${Object.keys(exportData[0]).map(key => `<th>${key}</th>`).join('')}
                </tr>
              </thead>
              <tbody>
                ${exportData.map(row => `
                  <tr>
                    ${Object.values(row).map(value => `<td>${value}</td>`).join('')}
                  </tr>
                `).join('')}
              </tbody>
            </table>
            <script>
              setTimeout(() => {
                window.print();
              }, 500);
            </script>
          </body>
          </html>
        `;

        printWindow.document.write(tableHTML);
        printWindow.document.close();
        break;
    }
  };

  // Get severity badge color (matching asset inventory style)
  const getSeverityBadgeColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
        return 'bg-danger';
      case 'high':
        return 'bg-warning';
      case 'medium':
        return 'bg-info';
      case 'low':
        return 'bg-success';
      default:
        return 'bg-secondary';
    }
  };

  // Get status badge color (matching asset inventory style)
  const getStatusBadgeColor = (status) => {
    switch (status?.toLowerCase()) {
      case 'open':
        return 'bg-danger';
      case 'fixed':
        return 'bg-success';
      case 'false_positive':
        return 'bg-warning';
      case 'reopened':
        return 'bg-info';
      case 'new':
        return 'bg-primary';
      default:
        return 'bg-secondary';
    }
  };

  // Get CVE badge color with variety
  const getCVEBadgeColor = (index, cveId) => {
    const colors = ['bg-primary', 'bg-info', 'bg-success', 'bg-warning', 'bg-purple', 'bg-pink'];
    // Use CVE ID hash for consistent coloring
    const hash = cveId.split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0);
    return colors[Math.abs(hash) % colors.length];
  };

  // Apply sorting
  const sortedData = useMemo(() => {
    if (!sortField) return data;
    return [...data].sort((a, b) => {
      let aValue = a[sortField];
      let bValue = b[sortField];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue?.toLowerCase() || '';
      }

      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
      return 0;
    });
  }, [data, sortField, sortDirection]);

  // Pagination
  const indexOfLastItem = currentPage * itemPerPage;
  const indexOfFirstItem = indexOfLastItem - itemPerPage;
  const currentItems = sortedData.slice(indexOfFirstItem, indexOfLastItem);

  // Define columns for the data table
  const columns = [
    {
      name: (
        <div className="d-flex align-items-center">
          <span style={{ fontSize: '0.875rem', fontWeight: '500' }}>Plugin ID</span>
          <div className="ms-1 d-flex flex-column">
            <Icon name="chevron-up" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
            <Icon name="chevron-down" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
          </div>
        </div>
      ),
      selector: (row) => row.plugin_id,
      sortable: true,
      width: "120px",
      cell: (row) => (
        <span className="tb-lead" style={{ fontSize: '0.8rem', fontWeight: '500' }}>
          {row.plugin_id}
        </span>
      ),
    },
    {
      name: (
        <div className="d-flex align-items-center">
          <span style={{ fontSize: '0.875rem', fontWeight: '500' }}>Plugin Name</span>
          <div className="ms-1 d-flex flex-column">
            <Icon name="chevron-up" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
            <Icon name="chevron-down" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
          </div>
        </div>
      ),
      selector: (row) => row.plugin_name,
      sortable: true,
      grow: 2,
      cell: (row) => (
        <div className="user-card">
          <div className="user-info">
            <span className="tb-lead" style={{ fontSize: '0.8rem', fontWeight: '500', lineHeight: '1.2' }}>
              {row.plugin_name}
            </span>
            <div className="text-soft" style={{ fontSize: '0.7rem', fontWeight: 'normal', lineHeight: '1.1' }}>
              {row.plugin_family}
            </div>
          </div>
        </div>
      ),
    },
    {
      name: (
        <div className="d-flex align-items-center">
          <span style={{ fontSize: '0.875rem', fontWeight: '500' }}>Severity</span>
          <div className="ms-1 d-flex flex-column">
            <Icon name="chevron-up" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
            <Icon name="chevron-down" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
          </div>
        </div>
      ),
      selector: (row) => row.severity_name,
      sortable: true,
      cell: (row) => (
        <span className={`badge badge-dim ${getSeverityBadgeColor(row.severity_name)}`} style={{ fontWeight: '600', fontSize: '0.7rem', padding: '0.25rem 0.5rem' }}>
          {row.severity_name}
        </span>
      ),
    },
    {
      name: (
        <div className="d-flex align-items-center">
          <span style={{ fontSize: '0.875rem', fontWeight: '500' }}>CVSS Score</span>
          <div className="ms-1 d-flex flex-column">
            <Icon name="chevron-up" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
            <Icon name="chevron-down" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
          </div>
        </div>
      ),
      selector: (row) => row.cvss3_base_score,
      sortable: true,
      width: "120px",
      cell: (row) => (
        <span className="tb-amount" style={{ fontSize: '0.8rem' }}>
          {row.cvss3_base_score ? parseFloat(row.cvss3_base_score).toFixed(1) : "N/A"}
        </span>
      ),
    },
    {
      name: (
        <div className="d-flex align-items-center">
          <span style={{ fontSize: '0.875rem', fontWeight: '500' }}>CVEs</span>
          <div className="ms-1 d-flex flex-column">
            <Icon name="chevron-up" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
            <Icon name="chevron-down" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
          </div>
        </div>
      ),
      selector: (row) => row.cves?.length || 0,
      sortable: true,
      width: "200px",
      cell: (row) => (
        <div className="tb-amount">
          {row.cves && row.cves.length > 0 ? (
            <div className="d-flex flex-wrap" style={{ gap: '0.25rem' }}>
              {row.cves.slice(0, 3).map((cve, index) => (
                <span
                  key={index}
                  className={`badge badge-dim ${getCVEBadgeColor(index, cve.cve_id)}`}
                  style={{ fontSize: '0.65rem', cursor: 'pointer', fontWeight: '600', padding: '0.2rem 0.4rem' }}
                  title={`${cve.cve_id} - CVSS: ${cve.cvss3_base_score || cve.cvss2_base_score || 'N/A'} - Click for details`}
                  onClick={(e) => {
                    e.stopPropagation();
                    handleViewCVE(cve.cve_id);
                  }}
                >
                  {cve.cve_id}
                </span>
              ))}
              {row.cves.length > 3 && (
                <span
                  className="badge badge-dim bg-secondary"
                  style={{ fontSize: '0.65rem', fontWeight: '600', padding: '0.2rem 0.4rem' }}
                  title={`${row.cves.length - 3} more CVEs`}
                >
                  +{row.cves.length - 3}
                </span>
              )}
            </div>
          ) : (
            <span className="text-soft" style={{ fontSize: '0.75rem' }}>No CVEs</span>
          )}
        </div>
      ),
    },
    {
      name: (
        <div className="d-flex align-items-center">
          <span style={{ fontSize: '0.875rem', fontWeight: '500' }}>Status</span>
          <div className="ms-1 d-flex flex-column">
            <Icon name="chevron-up" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
            <Icon name="chevron-down" style={{ fontSize: '0.6rem', color: '#8094ae', cursor: 'pointer' }}></Icon>
          </div>
        </div>
      ),
      selector: (row) => row.state,
      sortable: true,
      cell: (row) => (
        <span className={`badge badge-dim ${getStatusBadgeColor(row.state)}`} style={{ fontWeight: '600', fontSize: '0.7rem', padding: '0.25rem 0.5rem' }}>
          {row.state === 'false_positive' ? 'False Positive' :
           row.state === 'reopened' ? 'Reopened' :
           row.state?.charAt(0).toUpperCase() + row.state?.slice(1)}
        </span>
      ),
    },
    {
      name: "Actions",
      cell: (row) => (
        <UncontrolledDropdown>
          <DropdownToggle tag="a" className="dropdown-toggle btn btn-icon btn-trigger">
            <Icon name="more-h"></Icon>
          </DropdownToggle>
          <DropdownMenu end>
            <ul className="link-list-opt no-bdr">
              <li>
                <DropdownItem
                  tag="a"
                  href="#view"
                  onClick={(ev) => {
                    ev.preventDefault();
                    handleViewDetails(row);
                  }}
                >
                  <Icon name="eye"></Icon>
                  <span>View Details</span>
                </DropdownItem>
              </li>
              <li>
                <DropdownItem
                  tag="a"
                  href="#edit"
                  onClick={(ev) => {
                    ev.preventDefault();
                    // Handle edit action
                  }}
                >
                  <Icon name="edit"></Icon>
                  <span>Edit Status</span>
                </DropdownItem>
              </li>
            </ul>
          </DropdownMenu>
        </UncontrolledDropdown>
      ),
    },
  ];

  return (
    <React.Fragment>
      <Head title="Vulnerability Data"></Head>
      <Content>
        <BlockHead size="sm">
          <BlockHeadContent>
            <BlockTitle page>Vulnerability Data</BlockTitle>
            <BlockDes className="text-soft">
              Comprehensive vulnerability management and analytics dashboard
            </BlockDes>
          </BlockHeadContent>
          <BlockHeadContent>
            <div className="toggle-wrap nk-block-tools-toggle">
              <div className="toggle-expand-content">
                <ul className="nk-block-tools g-3">
                  <li>
                    <Button color="primary" size="sm" onClick={refreshMetrics} disabled={loading}>
                      <Icon name="reload"></Icon>
                      <span>Refresh Metrics</span>
                    </Button>
                  </li>
                </ul>
              </div>
            </div>
          </BlockHeadContent>
        </BlockHead>

        {/* Summary Cards */}
        <Block>
          <div className="row g-3">
            {/* Total Vulnerabilities - Red Gradient */}
            <div className="col-xxl-4 col-lg-4 col-md-6">
              <div className="card" style={{
                background: 'linear-gradient(135deg, #e74c3c 0%, #c0392b 100%)',
                border: 'none',
                borderRadius: '8px',
                height: '120px'
              }}>
                <div className="card-inner p-3 position-relative">
                  <div className="d-flex justify-content-between align-items-start mb-1">
                    <div>
                      <h6 className="text-white fw-bold mb-0" style={{ fontSize: '0.875rem' }}>Total Vulnerabilities</h6>
                      <p className="text-white-50 mb-0" style={{ fontSize: '0.75rem' }}>Last 30 days</p>
                    </div>
                    <Icon name="info" className="text-white-50" style={{ fontSize: '0.9rem' }}></Icon>
                  </div>
                  <div className="mb-2">
                    <h2 className="text-white fw-bold mb-0" style={{ fontSize: '1.8rem', lineHeight: '1' }}>
                      {summaryData.total}
                    </h2>
                  </div>
                  {/* Simple trend line */}
                  <div className="position-absolute bottom-0 start-0 w-100" style={{ height: '25px', overflow: 'hidden' }}>
                    <svg width="100%" height="25" style={{ position: 'absolute', bottom: '0' }}>
                      <path d="M0,20 Q50,15 100,18 T200,12 T300,10 T400,13"
                            stroke="rgba(255,255,255,0.3)"
                            strokeWidth="1.5"
                            fill="none"
                            vectorEffect="non-scaling-stroke"/>
                    </svg>
                  </div>
                </div>
              </div>
            </div>

            {/* Critical Vulnerabilities - Orange Gradient */}
            <div className="col-xxl-4 col-lg-4 col-md-6">
              <div className="card" style={{
                background: 'linear-gradient(135deg, #f39c12 0%, #e67e22 100%)',
                border: 'none',
                borderRadius: '8px',
                height: '120px'
              }}>
                <div className="card-inner p-3 position-relative">
                  <div className="d-flex justify-content-between align-items-start mb-1">
                    <div>
                      <h6 className="text-white fw-bold mb-0" style={{ fontSize: '0.875rem' }}>Critical Vulnerabilities</h6>
                      <p className="text-white-50 mb-0" style={{ fontSize: '0.75rem' }}>Last 30 days</p>
                    </div>
                    <Icon name="info" className="text-white-50" style={{ fontSize: '0.9rem' }}></Icon>
                  </div>
                  <div className="mb-2">
                    <h2 className="text-white fw-bold mb-0" style={{ fontSize: '1.8rem', lineHeight: '1' }}>
                      {summaryData.critical}
                    </h2>
                  </div>
                  {/* Simple trend line */}
                  <div className="position-absolute bottom-0 start-0 w-100" style={{ height: '25px', overflow: 'hidden' }}>
                    <svg width="100%" height="25" style={{ position: 'absolute', bottom: '0' }}>
                      <path d="M0,22 Q50,18 100,20 T200,15 T300,12 T400,14"
                            stroke="rgba(255,255,255,0.3)"
                            strokeWidth="1.5"
                            fill="none"
                            vectorEffect="non-scaling-stroke"/>
                    </svg>
                  </div>
                </div>
              </div>
            </div>

            {/* High Vulnerabilities - Green Gradient */}
            <div className="col-xxl-4 col-lg-4 col-md-6">
              <div className="card" style={{
                background: 'linear-gradient(135deg, #27ae60 0%, #2ecc71 100%)',
                border: 'none',
                borderRadius: '8px',
                height: '120px'
              }}>
                <div className="card-inner p-3 position-relative">
                  <div className="d-flex justify-content-between align-items-start mb-1">
                    <div>
                      <h6 className="text-white fw-bold mb-0" style={{ fontSize: '0.875rem' }}>High Vulnerabilities</h6>
                      <p className="text-white-50 mb-0" style={{ fontSize: '0.75rem' }}>Last 30 days</p>
                    </div>
                    <Icon name="info" className="text-white-50" style={{ fontSize: '0.9rem' }}></Icon>
                  </div>
                  <div className="mb-2">
                    <h2 className="text-white fw-bold mb-0" style={{ fontSize: '1.8rem', lineHeight: '1' }}>
                      {summaryData.high}
                    </h2>
                  </div>
                  {/* Simple trend line */}
                  <div className="position-absolute bottom-0 start-0 w-100" style={{ height: '25px', overflow: 'hidden' }}>
                    <svg width="100%" height="25" style={{ position: 'absolute', bottom: '0' }}>
                      <path d="M0,18 Q50,22 100,16 T200,20 T300,17 T400,15"
                            stroke="rgba(255,255,255,0.3)"
                            strokeWidth="1.5"
                            fill="none"
                            vectorEffect="non-scaling-stroke"/>
                    </svg>
                  </div>
                </div>
              </div>
            </div>

            {/* Medium Vulnerabilities - Blue Gradient */}
            <div className="col-xxl-4 col-lg-4 col-md-6">
              <div className="card" style={{
                background: 'linear-gradient(135deg, #3498db 0%, #2980b9 100%)',
                border: 'none',
                borderRadius: '8px',
                height: '120px'
              }}>
                <div className="card-inner p-3 position-relative">
                  <div className="d-flex justify-content-between align-items-start mb-1">
                    <div>
                      <h6 className="text-white fw-bold mb-0" style={{ fontSize: '0.875rem' }}>Medium Vulnerabilities</h6>
                      <p className="text-white-50 mb-0" style={{ fontSize: '0.75rem' }}>Last 30 days</p>
                    </div>
                    <Icon name="info" className="text-white-50" style={{ fontSize: '0.9rem' }}></Icon>
                  </div>
                  <div className="mb-2">
                    <h2 className="text-white fw-bold mb-0" style={{ fontSize: '1.8rem', lineHeight: '1' }}>
                      {summaryData.medium}
                    </h2>
                  </div>
                  {/* Simple trend line */}
                  <div className="position-absolute bottom-0 start-0 w-100" style={{ height: '25px', overflow: 'hidden' }}>
                    <svg width="100%" height="25" style={{ position: 'absolute', bottom: '0' }}>
                      <path d="M0,24 Q50,18 100,21 T200,16 T300,19 T400,17"
                            stroke="rgba(255,255,255,0.3)"
                            strokeWidth="1.5"
                            fill="none"
                            vectorEffect="non-scaling-stroke"/>
                    </svg>
                  </div>
                </div>
              </div>
            </div>

            {/* Low Vulnerabilities - Purple Gradient */}
            <div className="col-xxl-4 col-lg-4 col-md-6">
              <div className="card" style={{
                background: 'linear-gradient(135deg, #9b59b6 0%, #8e44ad 100%)',
                border: 'none',
                borderRadius: '8px',
                height: '120px'
              }}>
                <div className="card-inner p-3 position-relative">
                  <div className="d-flex justify-content-between align-items-start mb-1">
                    <div>
                      <h6 className="text-white fw-bold mb-0" style={{ fontSize: '0.875rem' }}>Low Vulnerabilities</h6>
                      <p className="text-white-50 mb-0" style={{ fontSize: '0.75rem' }}>Last 30 days</p>
                    </div>
                    <Icon name="info" className="text-white-50" style={{ fontSize: '0.9rem' }}></Icon>
                  </div>
                  <div className="mb-2">
                    <h2 className="text-white fw-bold mb-0" style={{ fontSize: '1.8rem', lineHeight: '1' }}>
                      {summaryData.low}
                    </h2>
                  </div>
                  {/* Simple trend line */}
                  <div className="position-absolute bottom-0 start-0 w-100" style={{ height: '25px', overflow: 'hidden' }}>
                    <svg width="100%" height="25" style={{ position: 'absolute', bottom: '0' }}>
                      <path d="M0,21 Q50,24 100,19 T200,22 T300,18 T400,21"
                            stroke="rgba(255,255,255,0.3)"
                            strokeWidth="1.5"
                            fill="none"
                            vectorEffect="non-scaling-stroke"/>
                    </svg>
                  </div>
                </div>
              </div>
            </div>

            {/* Resolution Rate - Teal Gradient */}
            <div className="col-xxl-4 col-lg-4 col-md-6">
              <div className="card" style={{
                background: 'linear-gradient(135deg, #1abc9c 0%, #16a085 100%)',
                border: 'none',
                borderRadius: '8px',
                height: '120px'
              }}>
                <div className="card-inner p-3 position-relative">
                  <div className="d-flex justify-content-between align-items-start mb-1">
                    <div>
                      <h6 className="text-white fw-bold mb-0" style={{ fontSize: '0.875rem' }}>Resolution Rate</h6>
                      <p className="text-white-50 mb-0" style={{ fontSize: '0.75rem' }}>Last 30 days</p>
                    </div>
                    <Icon name="info" className="text-white-50" style={{ fontSize: '0.9rem' }}></Icon>
                  </div>
                  <div className="mb-2">
                    <h2 className="text-white fw-bold mb-0" style={{ fontSize: '1.8rem', lineHeight: '1' }}>
                      {summaryData.resolutionRate}%
                    </h2>
                  </div>
                  {/* Simple trend line */}
                  <div className="position-absolute bottom-0 start-0 w-100" style={{ height: '25px', overflow: 'hidden' }}>
                    <svg width="100%" height="25" style={{ position: 'absolute', bottom: '0' }}>
                      <path d="M0,23 Q50,20 100,18 T200,15 T300,13 T400,11"
                            stroke="rgba(255,255,255,0.3)"
                            strokeWidth="1.5"
                            fill="none"
                            vectorEffect="non-scaling-stroke"/>
                    </svg>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </Block>

        {/* Data Table */}
        <Block>
          <DataTable className="card-stretch">
            <div className="card-inner position-relative card-tools-toggle">
              <div className="card-title-group">
                {/* Left side - Bulk Actions */}
                <div className="card-tools">
                  <div className="form-inline flex-nowrap gx-3">
                    <div className="form-wrap">
                      <RSelect
                        options={[
                          { value: "export", label: "Export Selected" },
                          { value: "delete", label: "Delete Selected" },
                        ]}
                        className="w-130px"
                        placeholder="Bulk Action"
                      />
                    </div>
                    <div className="btn-wrap">
                      <Button
                        disabled={selectedRows.length === 0}
                        color="light"
                        outline
                        className="btn-dim"
                      >
                        Apply
                      </Button>
                    </div>
                  </div>
                </div>

                {/* Right side - Export, Show, Search, Filter */}
                <div className="card-tools me-n1">
                  <ul className="btn-toolbar gx-1">
                    {/* Export Section */}
                    <li className="export-section">
                      <span className="export-label">Export</span>
                      <Button
                        color="light"
                        size="sm"
                        className="btn-icon export-excel"
                        onClick={() => handleExport('excel')}
                        title="Export to Excel"
                      >
                        <Icon name="file-xls" className="export-excel"></Icon>
                      </Button>
                      <Button
                        color="light"
                        size="sm"
                        className="btn-icon export-pdf"
                        onClick={() => handleExport('pdf')}
                        title="Export to PDF"
                      >
                        <Icon name="file-pdf" className="export-pdf"></Icon>
                      </Button>
                      <Button
                        color="light"
                        size="sm"
                        className="btn-icon export-csv"
                        onClick={() => handleExport('csv')}
                        title="Export to CSV"
                      >
                        <Icon name="file-text" className="export-csv"></Icon>
                      </Button>
                    </li>
                    <li className="btn-toolbar-sep"></li>

                    {/* Show entries */}
                    <li className="show-entries">
                      <span className="show-label">Show</span>
                      <RSelect
                        options={[
                          { value: 10, label: "10" },
                          { value: 25, label: "25" },
                          { value: 50, label: "50" },
                          { value: 100, label: "100" },
                        ]}
                        value={{ value: itemPerPage, label: itemPerPage.toString() }}
                        onChange={(selected) => setItemPerPage(selected.value)}
                        className="w-80px"
                      />
                    </li>
                    <li className="btn-toolbar-sep"></li>

                    {/* Search toggle */}
                    <li>
                      <a
                        href="#search"
                        onClick={(ev) => {
                          ev.preventDefault();
                          setOnSearch(!onSearch);
                        }}
                        className="btn btn-icon search-toggle toggle-search"
                      >
                        <Icon name="search"></Icon>
                      </a>
                    </li>
                  </ul>
                </div>
              </div>
            </div>

            {/* Table Body */}
            <DataTableBody compact className="compact-table">
              <DataTableHead>
                {/* Select All Checkbox */}
                <DataTableRow className="nk-tb-col-check">
                  <div className="custom-control custom-control-sm custom-checkbox notext">
                    <input
                      type="checkbox"
                      className="custom-control-input"
                      onChange={(e) => handleSelectAll(e.target.checked)}
                      id="uid_all"
                    />
                    <label className="custom-control-label" htmlFor="uid_all"></label>
                  </div>
                </DataTableRow>

                {/* Column Headers */}
                {columns.map((column, index) => (
                  <DataTableRow key={index}>
                    {column.sortable ? (
                      <div
                        className="d-flex align-items-center cursor-pointer sortable-header"
                        onClick={() => handleSort(column.selector)}
                      >
                        {column.name}
                      </div>
                    ) : (
                      <span className="sub-text">{column.name}</span>
                    )}
                  </DataTableRow>
                ))}
              </DataTableHead>

              {/* Table Rows */}
              {loading ? (
                <DataTableItem>
                  <DataTableRow colSpan={columns.length + 1}>
                    <div className="text-center py-4">
                      <div className="spinner-border spinner-border-sm" role="status">
                        <span className="visually-hidden">Loading...</span>
                      </div>
                      <p className="mt-2">Loading vulnerability data...</p>
                    </div>
                  </DataTableRow>
                </DataTableItem>
              ) : currentItems.length === 0 ? (
                <DataTableItem>
                  <DataTableRow colSpan={columns.length + 1}>
                    <div className="text-center py-4">
                      <Icon name="inbox" className="nk-icon-lg text-muted mb-2"></Icon>
                      <p>No vulnerability data found</p>
                    </div>
                  </DataTableRow>
                </DataTableItem>
              ) : (
                currentItems.map((item) => (
                  <DataTableItem key={item.id}>
                    {/* Row Checkbox */}
                    <DataTableRow className="nk-tb-col-check">
                      <div className="custom-control custom-control-sm custom-checkbox notext">
                        <input
                          type="checkbox"
                          className="custom-control-input"
                          checked={selectedRows.some(row => row.id === item.id)}
                          onChange={(e) => handleRowSelect(item, e.target.checked)}
                          id={`uid_${item.id}`}
                        />
                        <label className="custom-control-label" htmlFor={`uid_${item.id}`}></label>
                      </div>
                    </DataTableRow>

                    {/* Data Cells */}
                    {columns.map((column, index) => (
                      <DataTableRow key={index}>
                        {column.cell ? column.cell(item) : item[column.selector(item)]}
                      </DataTableRow>
                    ))}
                  </DataTableItem>
                ))
              )}
            </DataTableBody>

            {/* Pagination */}
            <div className="card-inner">
              <PaginationComponent
                itemPerPage={itemPerPage}
                totalItems={sortedData.length}
                paginate={setCurrentPage}
                currentPage={currentPage}
              />
            </div>
          </DataTable>
        </Block>
      </Content>

      {/* Vulnerability Details Panel */}
      <VulnerabilityDetailsPanel
        isOpen={detailsPanelOpen}
        onClose={handleClosDetailsPanel}
        vulnerability={selectedVulnerability}
      />

      {/* CVE Details Panel */}
      <CVEDetailsPanel
        isOpen={cvePanelOpen}
        onClose={handleCloseCVEPanel}
        cveId={selectedCveId}
      />
    </React.Fragment>
  );
};

export default VulnerabilityData;