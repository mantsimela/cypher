const express = require('express');
const router = express.Router();
const vulnerabilityAnalyticsController = require('../controllers/vulnerabilityAnalyticsController');
const { authenticateToken } = require('../middleware/auth');
const { requirePermission } = require('../middleware/rbac');

// Apply authentication to all routes
router.use(authenticateToken);

/**
 * @swagger
 * components:
 *   schemas:
 *     VulnerabilityCostAnalysis:
 *       type: object
 *       required:
 *         - vulnerabilityId
 *         - directCosts
 *         - indirectCosts
 *         - remediationCosts
 *         - totalCost
 *       properties:
 *         id:
 *           type: integer
 *           description: Unique identifier
 *         vulnerabilityId:
 *           type: integer
 *           description: Associated vulnerability ID
 *         costModelId:
 *           type: integer
 *           description: Cost model used for analysis
 *         directCosts:
 *           type: number
 *           format: decimal
 *           description: Direct costs associated with vulnerability
 *         indirectCosts:
 *           type: number
 *           format: decimal
 *           description: Indirect costs associated with vulnerability
 *         remediationCosts:
 *           type: number
 *           format: decimal
 *           description: Cost to remediate the vulnerability
 *         timeCosts:
 *           type: number
 *           format: decimal
 *           description: Time-based costs
 *         totalCost:
 *           type: number
 *           format: decimal
 *           description: Total calculated cost
 *         costBenefitRatio:
 *           type: number
 *           format: decimal
 *           description: Cost-benefit ratio
 *         roiPercentage:
 *           type: number
 *           format: decimal
 *           description: Return on investment percentage
 *         dataFactors:
 *           type: object
 *           description: Additional data factors used in calculation
 *         aiConfidence:
 *           type: number
 *           format: decimal
 *           description: AI confidence level (0-100)
 *         analysisDate:
 *           type: string
 *           format: date-time
 *           description: Date of analysis
 *         calculatedBy:
 *           type: string
 *           description: Who/what calculated the analysis
 *     
 *     VulnerabilityCostFactor:
 *       type: object
 *       required:
 *         - name
 *         - description
 *         - weight
 *         - category
 *         - minValue
 *         - maxValue
 *         - defaultValue
 *       properties:
 *         id:
 *           type: integer
 *           description: Unique identifier
 *         name:
 *           type: string
 *           description: Factor name
 *         description:
 *           type: string
 *           description: Factor description
 *         weight:
 *           type: number
 *           format: decimal
 *           description: Factor weight in calculations
 *         category:
 *           type: string
 *           description: Factor category
 *         minValue:
 *           type: number
 *           format: decimal
 *           description: Minimum value for factor
 *         maxValue:
 *           type: number
 *           format: decimal
 *           description: Maximum value for factor
 *         defaultValue:
 *           type: number
 *           format: decimal
 *           description: Default value for factor
 *         isActive:
 *           type: boolean
 *           description: Whether factor is active
 *         createdAt:
 *           type: string
 *           format: date-time
 *         updatedAt:
 *           type: string
 *           format: date-time
 */

// ===== COST ANALYSIS ROUTES =====

/**
 * @swagger
 * /api/v1/vulnerability-analytics/cost-analysis:
 *   get:
 *     summary: Get vulnerability cost analyses
 *     tags: [Vulnerability Analytics]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: vulnerabilityId
 *         schema:
 *           type: integer
 *         description: Filter by vulnerability ID
 *       - in: query
 *         name: costModelId
 *         schema:
 *           type: integer
 *         description: Filter by cost model ID
 *       - in: query
 *         name: minTotalCost
 *         schema:
 *           type: number
 *         description: Minimum total cost filter
 *       - in: query
 *         name: maxTotalCost
 *         schema:
 *           type: number
 *         description: Maximum total cost filter
 *       - in: query
 *         name: sortBy
 *         schema:
 *           type: string
 *           enum: [analysisDate, totalCost, vulnerabilityId]
 *         description: Sort field
 *       - in: query
 *         name: sortOrder
 *         schema:
 *           type: string
 *           enum: [asc, desc]
 *         description: Sort order
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: Limit results
 *       - in: query
 *         name: offset
 *         schema:
 *           type: integer
 *         description: Offset results
 *     responses:
 *       200:
 *         description: Cost analyses retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/VulnerabilityCostAnalysis'
 *                 count:
 *                   type: integer
 */
router.get('/cost-analysis', requirePermission('vulnerability_management:read'), vulnerabilityAnalyticsController.getCostAnalysis);

/**
 * @swagger
 * /api/v1/vulnerability-analytics/cost-analysis:
 *   post:
 *     summary: Create vulnerability cost analysis
 *     tags: [Vulnerability Analytics]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/VulnerabilityCostAnalysis'
 *     responses:
 *       201:
 *         description: Cost analysis created successfully
 *       400:
 *         description: Invalid input data
 *       403:
 *         description: Insufficient permissions
 */
router.post('/cost-analysis', requirePermission('vulnerability_management:write'), vulnerabilityAnalyticsController.createCostAnalysis);

/**
 * @swagger
 * /api/v1/vulnerability-analytics/cost-analysis/{id}:
 *   put:
 *     summary: Update vulnerability cost analysis
 *     tags: [Vulnerability Analytics]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: Cost analysis ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/VulnerabilityCostAnalysis'
 *     responses:
 *       200:
 *         description: Cost analysis updated successfully
 *       404:
 *         description: Cost analysis not found
 */
router.put('/cost-analysis/:id', requirePermission('vulnerability_management:write'), vulnerabilityAnalyticsController.updateCostAnalysis);

/**
 * @swagger
 * /api/v1/vulnerability-analytics/cost-analysis/{id}:
 *   delete:
 *     summary: Delete vulnerability cost analysis
 *     tags: [Vulnerability Analytics]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: Cost analysis ID
 *     responses:
 *       200:
 *         description: Cost analysis deleted successfully
 *       404:
 *         description: Cost analysis not found
 */
router.delete('/cost-analysis/:id', requirePermission('vulnerability_management:delete'), vulnerabilityAnalyticsController.deleteCostAnalysis);

// ===== COST FACTORS ROUTES =====

/**
 * @swagger
 * /api/v1/vulnerability-analytics/cost-factors:
 *   get:
 *     summary: Get vulnerability cost factors
 *     tags: [Vulnerability Analytics]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: category
 *         schema:
 *           type: string
 *         description: Filter by category
 *       - in: query
 *         name: isActive
 *         schema:
 *           type: boolean
 *         description: Filter by active status
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Search in name and description
 *     responses:
 *       200:
 *         description: Cost factors retrieved successfully
 */
router.get('/cost-factors', requirePermission('vulnerability_management:read'), vulnerabilityAnalyticsController.getCostFactors);

router.post('/cost-factors', requirePermission('vulnerability_management:write'), vulnerabilityAnalyticsController.createCostFactor);
router.put('/cost-factors/:id', requirePermission('vulnerability_management:write'), vulnerabilityAnalyticsController.updateCostFactor);
router.delete('/cost-factors/:id', requirePermission('vulnerability_management:delete'), vulnerabilityAnalyticsController.deleteCostFactor);

// ===== COST MODELS ROUTES =====

router.get('/cost-models', requirePermission('vulnerability_management:read'), vulnerabilityAnalyticsController.getCostModels);
router.post('/cost-models', requirePermission('vulnerability_management:write'), vulnerabilityAnalyticsController.createCostModel);
router.put('/cost-models/:id', requirePermission('vulnerability_management:write'), vulnerabilityAnalyticsController.updateCostModel);
router.delete('/cost-models/:id', requirePermission('vulnerability_management:delete'), vulnerabilityAnalyticsController.deleteCostModel);

// ===== ANALYTICS ROUTES =====

/**
 * @swagger
 * /api/v1/vulnerability-analytics/cost-summary:
 *   get:
 *     summary: Get vulnerability cost summary analytics
 *     tags: [Vulnerability Analytics]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Cost summary retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     totalAnalyses:
 *                       type: integer
 *                     totalCost:
 *                       type: number
 *                     avgCost:
 *                       type: number
 *                     avgDirectCosts:
 *                       type: number
 *                     avgIndirectCosts:
 *                       type: number
 *                     avgRemediationCosts:
 *                       type: number
 */
router.get('/cost-summary', requirePermission('vulnerability_management:read'), vulnerabilityAnalyticsController.getCostSummary);

/**
 * @swagger
 * /api/v1/vulnerability-analytics/vulnerability/{vulnerabilityId}/cost-analysis:
 *   get:
 *     summary: Get vulnerability with cost analysis
 *     tags: [Vulnerability Analytics]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: vulnerabilityId
 *         required: true
 *         schema:
 *           type: integer
 *         description: Vulnerability ID
 *     responses:
 *       200:
 *         description: Vulnerability with cost analysis retrieved successfully
 */
router.get('/vulnerability/:vulnerabilityId/cost-analysis', requirePermission('vulnerability_management:read'), vulnerabilityAnalyticsController.getVulnerabilityWithCostAnalysis);

module.exports = router;
