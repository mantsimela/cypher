#!/usr/bin/env node

const { db, client } = require('../src/db');
const fs = require('fs');
const path = require('path');

async function seedVulnerabilityData() {
  try {
    console.log('🔍 Starting vulnerability data seeding...');
    
    // Read the SQL file
    const sqlFilePath = path.join(__dirname, 'seed-vulnerability-data.sql');
    const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');
    
    console.log('📄 Executing vulnerability seeding SQL script...');
    
    // Execute the entire SQL script
    await client.unsafe(sqlContent);
    
    console.log('✅ Vulnerability data seeding completed successfully!');
    
    // Verify the data was inserted
    console.log('\n📊 Verifying data insertion...');
    
    try {
      const vulnerabilityCount = await client`SELECT COUNT(*) as count FROM vulnerabilities`;
      const cveAssociationCount = await client`SELECT COUNT(*) as count FROM vulnerability_cves`;
      const assetVulnCount = await client`SELECT COUNT(*) as count FROM asset_vulnerabilities`;
      const patchCount = await client`SELECT COUNT(*) as count FROM patches`;
      const vulnPatchCount = await client`SELECT COUNT(*) as count FROM vulnerability_patches`;
      
      console.log(`📊 Data verification results:`);
      console.log(`   🛡️  Vulnerabilities: ${vulnerabilityCount[0].count}`);
      console.log(`   🔗 Vulnerability-CVE associations: ${cveAssociationCount[0].count}`);
      console.log(`   🎯 Asset-Vulnerability relationships: ${assetVulnCount[0].count}`);
      console.log(`   🔧 Patches: ${patchCount[0].count}`);
      console.log(`   🩹 Vulnerability-Patch relationships: ${vulnPatchCount[0].count}`);
      
      // Show severity breakdown
      const severityBreakdown = await client`
        SELECT 
          severity_name,
          COUNT(*) as count,
          ROUND(AVG(cvss3_base_score), 2) as avg_cvss
        FROM vulnerabilities 
        GROUP BY severity_name, severity
        ORDER BY severity DESC
      `;
      
      console.log(`\n📈 Vulnerability severity breakdown:`);
      severityBreakdown.forEach(row => {
        console.log(`   ${row.severity_name}: ${row.count} vulnerabilities (avg CVSS: ${row.avg_cvss})`);
      });
      
      // Show asset vulnerability distribution
      const assetVulnDistribution = await client`
        SELECT 
          COUNT(DISTINCT asset_uuid) as assets_with_vulns,
          AVG(vuln_count) as avg_vulns_per_asset,
          MAX(vuln_count) as max_vulns_per_asset
        FROM (
          SELECT asset_uuid, COUNT(*) as vuln_count
          FROM asset_vulnerabilities
          GROUP BY asset_uuid
        ) asset_stats
      `;
      
      console.log(`\n🎯 Asset vulnerability distribution:`);
      console.log(`   Assets with vulnerabilities: ${assetVulnDistribution[0].assets_with_vulns}`);
      console.log(`   Average vulnerabilities per asset: ${Math.round(assetVulnDistribution[0].avg_vulns_per_asset)}`);
      console.log(`   Maximum vulnerabilities on single asset: ${assetVulnDistribution[0].max_vulns_per_asset}`);
      
      // Show patch effectiveness
      const patchEffectiveness = await client`
        SELECT 
          effectiveness,
          COUNT(*) as count
        FROM vulnerability_patches
        GROUP BY effectiveness
        ORDER BY count DESC
      `;
      
      console.log(`\n🩹 Patch effectiveness distribution:`);
      patchEffectiveness.forEach(row => {
        console.log(`   ${row.effectiveness}: ${row.count} patches`);
      });
      
      console.log('\n🎉 Vulnerability data seeding verification completed!');
      
    } catch (verifyError) {
      console.error('❌ Error verifying data:', verifyError.message);
    }
    
  } catch (error) {
    console.error('❌ Vulnerability data seeding failed:', error);
    console.error('Error details:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

// Handle unhandled promise rejections
process.on('unhandledRejection', (error) => {
  console.error('❌ Unhandled promise rejection:', error);
  process.exit(1);
});

// Run the seeder
console.log('🚀 Vulnerability Data Seeding Script');
console.log('=====================================');
seedVulnerabilityData();
